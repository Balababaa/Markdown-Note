<resultMap>
	id ：必填，并且唯一。在select 标签中， resultMap 指定的值即为此处id 所设置的值。
	type ：必填，用于配置查询列所映射到的Java 对象类型。
	extends ： 选填，可以配置当前的resultMap 继承自其他的re sultMap ，属性值为继承resultMap 的id 。
	autoMapping ：选填，可选值为true 或false ，用于配置是否启用非映射字段（没有在resultMap 中配置的字段〉的自动映射功能， 该配置可以覆盖全局的autoMappingBehavior 配置。
<resultMap>内标签：
	constructor ： 配置使用构造方法注入结果，包含以下两个子标签。
		idArg: id 参数，标记结果作为id （唯一值），可以帮助提高整体性能。
		arg ：注入到构造方法的一个普通结果。
	id ： 一个id 结果，标记结果作为id （唯一值），可以帮助提高整体性能。
	result ： 注入到Java 对象属性的普通结果。
	association ： 一个复杂的类型关联，许多结果将包成这种类型。
	collection ： 复杂类型的集合。
	discriminator ：根据结果值来决定使用哪个结果映射。
	case ： 基于某些值的结果映射。
	---
		constructor ： 通过构造方法注入属性的结果值。构造方法中的idArg 、arg 参数分
			别对应着resultMap 中的id 、result 标签，它们的含义相同，只是注入方式不同。
		resultMap 中的id 和result 标签包含的属性相同，不同的地方在于， id 代表的是
			主键（或唯一值）的字段（可以有多个），它们的属性值是通过setter 方法注入的。
		<result>:
			column ： 从数据库中得到的列名， 或者是列的别名。
			property ：映射到列结果的属性。可以映射简单的如“ username ”这样的属性，也可以映射一些复杂对象中的属性， 例如“ address.street.number ”，这会通过“ ．”方式的属性嵌套赋值。
			javaType ： 一个Java类的完全限定名，或一个类型别名（通过typeAlias 配置或者默认的类型）。如果映射到一个JavaBean, MyBatis通常可以自动判断属性的类型。如果映射到HashMap ，则需要明确地指定j av a Type 属性。
			jdbcType ： 列对应的数据库类型。JDBC类型仅仅需要对插入、更新、删除操作可能为空的列进行处理。这是JDB C j dbcType 的需要，而不是MyB atis 的需要。
			typeHandler ：使用这个属性可以覆盖默认的类型处理器。这个属性值是类的完全限
			定名或类型别名。

UserMapper.xml:
	< select ＞ ： 映射查询语句使用的标签。
	id ：命名空间中的唯一标识符，可用来代表这条语句。
	resultMap ：用于设置返回值的类型和映射关系。
	select 标签中的select 女from sys user where id= #{id ｝是查询语句。
	# {id} : MyBatis SQL 中使用预编译参数的一种方式，大括号中的id 是传入的参数名。
	

可以发现，如果使用result Type 来设置返回结果的类型，需要在SQL 中为所有列
名和属性名不一致的列设置别名，通过设置别名使最终的查询结果列和result Type 指定对象
的属性名保持一致，进而实现自动映射。

可以通过在resultMap 中配直property 属性和column 属性的映射，或者在SQL 中
设直别名这两种方式实现将查询列映射到对象属性的目的。

property 属性或别名委和对象中属性的名字相同，但是实际匹配时， MyBatis 会先将两
者都转换为大写形式，然后再判断是否相同，即property ＝” userName ”和property=
” username ”都可以匹配到对象的userName 属性上。判断是否相同的时候要使用USERNAME,
因此在设直property 属性或别名的时候，不需要考虑大小写是否一致，但是为了便于阅读，
要尽可能按照统一的规则来设直。


因此MyBatis 还提供了一个全局属性
mapUnderscoreToCamelCase ，通过配置这个属性为true 可以自动将以下画线方式命名的
数据库列映射到Java 对象的驼峰式命名属性中。这个属性默认为false ，如果想要使用该功能，
需要在MyBatis 的配置文件（第l 章中的mybatis-config.xml 文件）中增加如下配置。
<settings>
〈！－－其他面己直一〉
<setting name= ” mapUnderscoreToCamelCase ” value=” true ” />
</sett 工ngs>
使用上述配置的时候，前面的selectAll 可以改写如下。
<select id= ” selectAl l ” resultType=” tk.mybatis.simple.model.SysUser” >
select id ,
user name ,
user password,
user email ,
user info,
head img,
create time
from sys user
</select>

select * from sys_user 在性能上会比上面的差 通常会指定列


UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
			SysUser user = userMapper.selectById(1L);
			
接口实现
